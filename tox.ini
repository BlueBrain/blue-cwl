[base]
name = cwl_registry
path = src/cwl_registry
testdeps =
    pytest
    libsonata
    voxcell
basetemp=tmptestdir/{envname}

minversion = 3.18

# ignore basepython for envs that already specify a version
ignore_basepython_conflict = true

[testenv]
basepython=python3.9
setenv =
    PIP_INDEX_URL = https://bbpteam.epfl.ch/repository/devpi/simple
deps = {[base]testdeps}
commands_pre = /bin/mkdir -p {[base]basetemp}
commands = python -m pytest --basetemp=tmptestdir/{envname} tests/unit {posargs}
allowlist_externals =
    /bin/mkdir
    ./tests/functional/certificate.sh


[testenv:functional]
deps =
    {[base]testdeps}
    brainbuilder>=0.18.2
passenv =
    NEXUS_TOKEN
setenv = 
    NEXUS_BASE = https://staging.nise.bbp.epfl.ch/nexus/v1
    NEXUS_ORG = bbp_test
    NEXUS_PROJ =  studio_data_11
    SSL_CERT_FILE = {env_site_packages_dir}/certifi/cacert.pem
commands_pre =
    /bin/mkdir -p {[base]basetemp}
    ./tests/functional/certificate.sh
commands = python -m pytest --basetemp=tmptestdir/{envname} tests/functional


[testenv:functional-{nexus_ok,cell_composition,cell_position,placeholder_emodel_assignment,placeholder_morphology_assignment}]
deps =
    {[base]testdeps}
    cell_position: brainbuilder>=0.18.2
passenv =
    NEXUS_TOKEN
setenv = 
    NEXUS_BASE = https://staging.nise.bbp.epfl.ch/nexus/v1
    NEXUS_ORG = bbp_test
    NEXUS_PROJ =  studio_data_11
    SSL_CERT_FILE = {env_site_packages_dir}/certifi/cacert.pem
commands_pre =
    /bin/mkdir -p {[base]basetemp}
    ./tests/functional/certificate.sh
commands =
    nexus_ok: python -m pytest --basetemp=tmptestdir/{envname} tests/functional/test_nexus_ok.py
    cell_composition: python -m pytest --basetemp=tmptestdir/{envname} tests/functional/test_cell_composition.py
    cell_position: python -m pytest --basetemp=tmptestdir/{envname} tests/functional/test_cell_position.py
    placeholder_emodel_assignment: python -m pytest --basetemp=tmptestdir/{envname} tests/functional/test_placeholder_emodel_assignment.py
    placeholder_morphology_assignment: python -m pytest --basetemp=tmptestdir/{envname} tests/functional/test_placeholder_morphology_assignment.py

[testenv:check-version]
skip_install = true
deps = bbp-nse-ci>=0.4.2
commands = do_release.py -p . check-version

[testenv:check-packaging]
deps =
    wheel
    twine
commands =
    python setup.py sdist bdist_wheel -d {envtmpdir}/dist
    twine check {envtmpdir}/dist/*

[testenv:lint]
deps =
    pycodestyle
    pydocstyle
    pylint
    isort
    black
commands =
    pycodestyle {[base]path}
    pydocstyle {[base]path}
    pylint {[base]path}
    isort --check-only --diff {[base]path}
    black --check .

[testenv:format]
deps =
    isort
    black
commands =
    isort {[base]path}
    black .

[testenv:coverage]
deps =
    {[base]testdeps}
    coverage[toml]
    pytest-cov
commands =
    python -m pytest --cov={[base]name} --basetemp=tmptestdir/{envname} tests/unit {posargs}
    coverage xml
    coverage html

[coverage:run]
# app is tested in functional tests
omit = */cwl_registry/app/*

[testenv:docs]
changedir = doc
extras = docs
# set warnings as errors using the -W sphinx option
commands = make html SPHINXOPTS=-W
allowlist_externals =
    {[testenv]allowlist_externals}
    make

[pycodestyle]
# E731: do not assign a lambda expression, use a def
# W503: line break after binary operator
# W504: line break before binary operator
# E501: line too long (checked with pylint)
ignore = E731,W503,W504,E501,E203

[pydocstyle]
# D413: no blank line after last section
# D415: First line should end with a period, question mark, or exclamation point
# D417: Missing argument description
add-ignore = D413, D415, D417
convention = google
